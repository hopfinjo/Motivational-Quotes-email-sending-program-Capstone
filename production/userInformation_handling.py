import re
class UserInformation:
    """
    Handles all information-storage and interaction with the user.
    """

    def __init__(self):
        """
        Generates empty fields of RegisterLoginUser object
        """
        self.user_email = None
        self.user_first_name = None
        self.user_pw = None
        self.user_current_Quote = None
        self.user_isexisting = False
        self.already_used_quotes = []
        self.set_preferred_email_time = None

    def get_registration_information_from_user(self):
        """Prompt the user for registration information.

        Returns:
            Tuple: user_first_name, user_password
        """

        while True:
            first_name = input("Please enter your first name").strip()
            if first_name:
                break
            else:
                print("First name cannot be empty! Please try again")
        # If password entry was to be added to this program:
        # add mechanism to enter password twice and double check for equality.
        password = "1234"  # Placeholder for password
        self.user_first_name = first_name

        return first_name, password

    def get_user_email(self):
        """Prompt user for email address.

        Returns:
            String: email address
        """
        while True:
            user_email = input("Please enter your email address:").strip()
            if user_email and self.check_email(user_email):
                self.user_email = user_email
                return user_email
            else:
                print("Please input valid email address. Try again:")

    def check_if_isexisting_user(self, database_user_information_table):
        """Checks if user is already in Database.

        Args:
            user_email (String): User email address(cannot be empty)
            user_information_collection (MongoDB collection): table that holds user information

        Returns:
            Boolean: True if existing user and False if not
        """
        self.user_isexisting = database_user_information_table.find_one(
            {"user_email": self.user_email})

        if self.user_isexisting:
            return True
        else:
            return False

    # https://www.geeksforgeeks.org/check-if-email-address-valid-or-not-in-python/
    # verifying email addresses copied from above link.

    @staticmethod
    def check_email(email):
        """      
        Returns True for "valid" email address and False for invalid email.
        Does validation checking using following regular expression:
        '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'

        Args:
            email (String): email address inputed by user

        Returns:
            boolean: True or False
        """

        # Regular expression used to validating Emails
        regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'

        if(re.fullmatch(regex, email)):
            return True
        else:
            return False
        
        
    @staticmethod    
    def add_current_quote_to_alreadyUsed(oldcurrent, already_used_quotes):
        """ Updates the current_quote of user. 
        Stores old current_quote in already_used_quotes variable of self object. 

        Args:
            newquote (String): String holding new quote generated by chatgpt
        """
        
        # currently set up for 15 old quotes. 
        # EVENTUALLY CHECK FOR MAX INPUT TO CHATGPT
        
        if already_used_quotes is not None and len(already_used_quotes) >= 15:
            del already_used_quotes[0]       

        already_used_quotes.append(oldcurrent)
        return already_used_quotes
        
        
    def get_preferred_sending_time(self):
        """
        Get time input from user.
        Default return is "17:00" (5PM).

        Returns:
            STRING: Returns time - String
        """
        user_customize_time = input("If you would like to get your daily motivation boost at a different time, input time in 24:00 format. (if not, press Enter)")
        if user_customize_time!="":

            # verify input from time:
            pattern = re.compile("[0-2][0-9]:[0-6][0-9]")
            if not pattern.match(user_customize_time):
                print("YOU ENTERED AN INVALID TIME, your time is set to 17:00 as default")
                return "17:00"
            
            return user_customize_time
        
        return "17:00"

    def get_keywords_from_user(self):
        """
        Gets user input. User input must be seperated by space and limited to 5 words.

        Returns:
            list: list of keywords
        """
        user_input_keywords = input("input a list of keywords seperated by spaces. Maximum 5.")
        user_input_keywords_arr = user_input_keywords.split()
        return user_input_keywords_arr